# coding: utf-8

from __future__ import absolute_import
from typing import List, Dict

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UpdateBookRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, book_description: str = None, book_title: str = None, book_author: str = None):  # noqa: E501
        """UpdateBookRequest - a model defined in Swagger

        :param book_description: The book_description of this UpdateBookRequest.
        :type book_description: str
        :param book_title: The book_title of this UpdateBookRequest.
        :type book_title: str
        :param book_author: The book_author of this UpdateBookRequest.
        :type book_author: str
        """
        self.swagger_types = {
            'book_description': str,
            'book_title': str,
            'book_author': str
        }

        self.attribute_map = {
            'book_description': 'bookDescription',
            'book_title': 'bookTitle',
            'book_author': 'bookAuthor'
        }

        self._book_description = book_description
        self._book_title = book_title
        self._book_author = book_author

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateBookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type dikt: dict
        :return: The UpdateBookRequest instance.
        :rtype: UpdateBookRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def book_description(self) -> str:
        """Gets the book_description of this UpdateBookRequest.

        :return: The book_description of this UpdateBookRequest.
        :rtype: str
        """
        return self._book_description

    @book_description.setter
    def book_description(self, book_description: str):
        """Sets the book_description of this UpdateBookRequest.

        :param book_description: The book_description of this UpdateBookRequest.
        :type book_description: str
        """
        self._book_description = book_description

    @property
    def book_title(self) -> str:
        """Gets the book_title of this UpdateBookRequest.

        :return: The book_title of this UpdateBookRequest.
        :rtype: str
        """
        return self._book_title

    @book_title.setter
    def book_title(self, book_title: str):
        """Sets the book_title of this UpdateBookRequest.

        Validates the book title before setting it.

        :param book_title: The book_title of this UpdateBookRequest.
        :type book_title: str
        :raises ValueError: If the book title is invalid.
        """
        if not book_title or len(book_title) < 3:
            raise ValueError("Book title must be at least 3 characters long")
        self._book_title = book_title

    @property
    def book_author(self) -> str:
        """Gets the book_author of this UpdateBookRequest.

        :return: The book_author of this UpdateBookRequest.
        :rtype: str
        """
        return self._book_author

    @book_author.setter
    def book_author(self, book_author: str):
        """Sets the book_author of this UpdateBookRequest.

        :param book_author: The book_author of this UpdateBookRequest.
        :type book_author: str
        """
        self._book_author = book_author

